{"version":3,"sources":["components/profile/profile.module.scss","components/error/error.module.scss","components/find/Find.module.css","redux/reducers/profile.ts","api/api.ts","redux/reducers/pagination.ts","components/testComponents/c1-SuperInputText/SuperInputText.tsx","components/preloader/spinner.tsx","components/message/message.tsx","components/testComponents/c2-SuperButton/SuperButton.tsx","components/testComponents/c3-SuperCheckbox/SuperCheckbox.tsx","components/login/login.tsx","redux/reducers/password.ts","components/newPass/newPass.tsx","components/passRecower/recover.tsx","components/profile/profile.tsx","redux/types.ts","redux/actions/register.ts","components/register/register.tsx","components/error/error.tsx","components/navigation/nav.tsx","redux/reducers/find.ts","redux/reducers/cards.ts","components/pagination/Pagin.tsx","components/find/Find.tsx","components/packs/packs.tsx","redux/reducers/singleCard.ts","components/cards/cards.tsx","App.tsx","reportWebVitals.ts","redux/reducers/register.ts","redux/store.ts","index.tsx","components/packs/packs.module.scss","components/cards/cards.module.scss","components/login/login.module.scss","components/testComponents/c1-SuperInputText/SuperInputText.module.css","components/testComponents/c3-SuperCheckbox/SuperCheckbox.module.css","components/passRecower/passRecover.module.scss","components/register/register.module.scss","components/pagination/pagination.module.scss","components/message/message.module.scss","components/testComponents/c2-SuperButton/SuperButton.module.css","components/newPass/newPass.module.scss","components/navigation/nav.module.scss"],"names":["module","exports","ACTION_TYPES","instance","axios","create","baseURL","withCredentials","API","data","post","then","response","payload","email","from","message","password","resetPasswordToken","delete","get","page","pageCount","sortPacks","min","max","packName","id","cardsPack","name","put","_id","initState","user","avatar","publicCardPacksCount","verified","rememberMe","isAuthSuccess","error","loading","setUserDataAC","isAuth","type","SET_USER_DATA","setUserLoadingAC","SET_USER_LOADING","setErrorMessageAC","SET_ERROR_MESSAGE","Input","onChange","onChangeText","onKeyPress","onEnter","spanClassName","className","touched","restProps","finalSpanClassName","s","finalInputClassName","errorInput","e","currentTarget","value","key","superInput","Preloader","Message","cls","classes","push","join","SuperButton","color","onClick","Btn","SuperCheckbox","onChangeChecked","children","checkbox","label","checked","Login","dispatch","useDispatch","errorLogin","useSelector","state","profile","isLoaded","history","useHistory","setTimeout","formik","useFormik","initialValues","onSubmit","values","a","res","_","console","log","validate","errors","test","length","handleSubmit","Loginform","placeholder","getFieldProps","onBlur","handleBlur","BtnWrapper","disabled","isMessageSend","isNewPasswordSet","isFetching","isError","setMessageSendAC","setIsFetchingAC","setErrorAC","NewPass","token","useParams","setNewPassword","to","SuperInputText","style","PassRecover","React","memo","useState","timeForNextTry","setTimeForNextTry","useEffect","clearTimeout","onFocus","Profile","isAuthorised","Object","map","REGISTER_NEW_USER","GET_REGISTRATION_ERROR","SET_REG_LOADING","onRegister","onError","Register","registerStatuses","register","redirectToLogin","getState","addedUser","errorMsg","resetForm","registerForm","Btns","Error","Nav","routeList","RouteLink","initialState","pageRangeDisplayed","activePage","itemsCountPerPage","totalItemsCount","cards","setLoading","setError","getAllCards","cardPacks","totalItems","SET_TOTAL_ITEMS","setTotalItemsAC","cardPacksTotalCount","minCardsCount","maxCardsCount","catch","Pagin","pagination","isChanged","setIsChanged","toString","Fragment","styles","bar","pageNumber","SET_ACTIVE_PAGE","setActivePageAC","itemClass","item","pagePortion","itemsCount","SET_PAGINATION","setPaginationAC","searchValue","Find","isChange","setIsChange","setSearchValue","appendValue","trim","SET_SEARCH_VALUE","setSearchValueAC","searchField","TextField","helperText","autoFocus","inputValue","Button","variant","Packs","CustomTableCell","withStyles","theme","head","backgroundColor","palette","common","black","white","body","fontSize","background","TableCell","CustomSwitch","root","transform","borderRadius","Switch","isLoading","myId","sort","setSort","setValues","deleteHandler","deleteCards","onUpdated","updateCards","rows","el","TableRow","component","scope","align","cardsCount","user_id","path","button","rightIcon","Typography","gutterBottom","Grid","container","xs","direction","justify","width","margin","flexBasis","Slider","valueLabelDisplay","aria-labelledby","newValue","Icon","Paper","Table","table","TableHead","TableBody","card","setSingleCardLoading","load","Cards","cardPack","singlePack","getSinglePack","slice","answer","question","grade","rating","shots","App","exact","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","action","pack","find","store","createStore","applyMiddleware","thunk","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0f61be18.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Profile\":\"profile_Profile__zjy0j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Error\":\"error_Error__1tclE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchField\":\"Find_searchField__1NVK-\"};","import {Dispatch} from \"redux\";\r\nimport {API} from \"../../api/api\";\r\n\r\n//types constants\r\nenum ACTION_TYPES {\r\n    SET_USER_DATA = \"SET_USER_DATA\",\r\n    SET_ERROR_MESSAGE = 'SET_ERROR_MESSAGE',\r\n    SET_USER_LOADING = 'SET_USER_LOADING'\r\n}\r\n\r\n//Common types\r\nexport type LoginDataType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n}\r\n\r\ntype ProfileStateType = {\r\n    user: User,\r\n    isAuthSuccess: boolean,\r\n    error: string,\r\n    loading: boolean\r\n}\r\n\r\nexport type User = {\r\n    email: string,\r\n    name: string,\r\n    avatar: string | undefined,\r\n    publicCardPacksCount: number | null,\r\n    verified: boolean,\r\n    rememberMe: boolean,\r\n    message: string,\r\n    _id: string\r\n}\r\n\r\n//Action Creators Type\r\ntype SetUserDataActionType = {\r\n    type: ACTION_TYPES.SET_USER_DATA,\r\n    user: User,\r\n    isAuth:boolean\r\n}\r\n\r\ntype SetErrorMessage = {\r\n    type: ACTION_TYPES.SET_ERROR_MESSAGE,\r\n    error: string\r\n}\r\n\r\ntype SetUserLoading = {\r\n    type: ACTION_TYPES.SET_USER_LOADING\r\n    loading: boolean\r\n}\r\ntype AllActionsTypes = SetUserDataActionType | SetErrorMessage | SetUserLoading\r\n\r\n//Reducer\r\nconst initState = {\r\n    user: {\r\n        email: '',\r\n        name: '',\r\n        avatar: '',\r\n        publicCardPacksCount: null,\r\n        verified: false,\r\n        rememberMe: false,\r\n        message: '',\r\n        _id: ''\r\n    },\r\n    isAuthSuccess: false,\r\n    error: '',\r\n    loading: false\r\n}\r\n\r\nexport const profileReducer = (state: ProfileStateType = initState, action: AllActionsTypes): ProfileStateType => {\r\n    switch (action.type) {\r\n        case ACTION_TYPES.SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                user: action.user,\r\n                isAuthSuccess: action.isAuth,\r\n                error: ''\r\n            }\r\n        case ACTION_TYPES.SET_ERROR_MESSAGE:\r\n            return  {\r\n                ...state,\r\n                isAuthSuccess: false,\r\n                error: action.error,\r\n            }\r\n        case ACTION_TYPES.SET_USER_LOADING:\r\n            return {\r\n                ...state, loading:action.loading\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//ActionCreators\r\nconst setUserDataAC = (user: User, isAuth:boolean) => {\r\n    return {\r\n        type: ACTION_TYPES.SET_USER_DATA,\r\n        user,\r\n        isAuth\r\n    }\r\n}\r\nconst setUserLoadingAC = (loading: boolean) => {\r\n    return {\r\n        type: ACTION_TYPES.SET_USER_LOADING,\r\n        loading\r\n    }\r\n}\r\nconst setErrorMessageAC = (error: string) => {\r\n    return {\r\n        type: ACTION_TYPES.SET_ERROR_MESSAGE,\r\n        error\r\n    }\r\n}\r\n\r\n//ThunkCreators\r\nexport const setUserDateTC = (payload: LoginDataType) => async (dispatch: Dispatch) => {\r\n    dispatch(setUserLoadingAC(true))\r\n    try {\r\n        const res = await API.login(payload)\r\n        const {\r\n            avatar,\r\n            email,\r\n            name,\r\n            publicCardPacksCount,\r\n            rememberMe,\r\n            verified,\r\n            _id,_\r\n        } = res\r\n\r\n        const user = {\r\n            avatar,\r\n            email,\r\n            name,\r\n            publicCardPacksCount,\r\n            rememberMe,\r\n            verified,\r\n            _id,\r\n            message: `${email} successfully logged`\r\n        }\r\n        dispatch(setUserDataAC(user, true))\r\n\r\n    } catch (e) {\r\n        const error = e.response ? e.response.data.error : `${e.message} more details in the console`\r\n        console.log('Error: ', {...e})\r\n        dispatch(setErrorMessageAC(error))\r\n    }\r\n    dispatch(setUserLoadingAC(false))\r\n}\r\n\r\nexport const deleteUserTC = () => async (dispatch: Dispatch) => {\r\n    dispatch(setUserLoadingAC(true))\r\n    try {\r\n        await API.logout()\r\n        dispatch(setUserDataAC({\r\n        email: '',\r\n        name: '',\r\n        avatar: '',\r\n        publicCardPacksCount: null,\r\n        verified: false,\r\n        rememberMe: false,\r\n        _id: '',\r\n        message: ''}, false))\r\n    }\r\n    catch (e) {\r\n    dispatch(setErrorMessageAC('Something gonna wrong'))\r\n    }\r\n    dispatch(setUserLoadingAC(false))\r\n}\r\n\r\nexport const isUserAuth = () => async (dispatch: Dispatch) => {\r\n    dispatch(setUserLoadingAC(true))\r\n    try {\r\n        const data = await API.isAuth()\r\n        console.log(data);\r\n        const {avatar,email,name,publicCardPacksCount,rememberMe,verified, _id} = data\r\n        const user = {\r\n            avatar,\r\n            email,\r\n            name,\r\n            publicCardPacksCount,\r\n            rememberMe,\r\n            verified,\r\n            _id,\r\n            message: `${email} successfully logged`\r\n        }\r\n        dispatch(setUserDataAC(user, true))        \r\n    }\r\n    catch (e) {\r\n        const error = {...e };\r\n         dispatch(setErrorMessageAC(error.response.data.error))\r\n        \r\n        \r\n    }\r\n    dispatch(setUserLoadingAC(false))\r\n}","import axios from 'axios';\r\nimport { LoginDataType } from '../redux/reducers/profile';\r\n//  `https://neko-back.herokuapp.com/2.0`\r\n\r\ntype LoginResponseType = {\r\n  _id: string;\r\n  email: string;\r\n  name: string;\r\n  avatar?: string;\r\n  publicCardPacksCount: number; // количество колод\r\n  created: Date;\r\n  updated: Date;\r\n  isAdmin: boolean;\r\n  verified: boolean; // подтвердил ли почту\r\n  rememberMe: boolean;\r\n  error?: string;\r\n}\r\n\r\nconst messageForRecoveryPassword =\r\n  `<div>\r\n       To recover your password, follow the link:\r\n        <br/> \r\n          <a href='https://VovanVovanic.github.io/teamProject/#/NewPass/$token$'>\r\n            https://VovanVovanic.github.io/teamProject/#/NewPass/\r\n           </a>\r\n     </div>`\r\n\r\n\r\nlet instance = axios.create({\r\n  baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n  // baseURL: `http://localhost:7542/2.0/`,\r\n  withCredentials: true,\r\n})\r\n\r\n// const herokuInstance = axios.create({\r\n//   baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n//   withCredentials: true\r\n// })\r\n\r\nexport type userRegType = {\r\n  email: string\r\n  password: string\r\n}\r\nexport const API = {\r\n  getResponse() {\r\n    const date = Date.now().toString()\r\n    return instance.get(`ping?frontTime=${date}`).then(response => response.data)\r\n  },\r\n  register(data: userRegType) {\r\n    return instance.post('auth/register/', data).then(response => response.data)\r\n  },\r\n  login(payload: LoginDataType) {\r\n    return instance.post(`auth/login/`, payload).then(response => response.data)\r\n  },\r\n  forgotPassword(email: string) {\r\n    return instance.post('auth/forgot', {\r\n      email,\r\n      from: 'Microsoft<pharm.sale777@gmail.com>',\r\n      message: messageForRecoveryPassword\r\n    })\r\n  },\r\n  setNewPassword(password: string, resetPasswordToken: string) {\r\n    return instance.post<{ info: string }>('auth/set-new-password', { password, resetPasswordToken })\r\n  },\r\n  logout() {\r\n    return instance.delete(`auth/me/`, {}).then(response => response.data)\r\n  },\r\n  isAuth() {\r\n    return instance.post(`auth/me/`, {}).then(response => response.data)\r\n  },\r\n  updateUser(name: string, avatar: string) {\r\n    return instance.put(`auth/me/`, { name, avatar }).then((response) => response.data)\r\n  },\r\n  getCards(data?: AddDataType) {\r\n    return instance.get<CardsResponseType>(`cards/pack/?&page=${data?.page}&pageCount=${data?.pageCount}&sortPacks=${data?.sortPacks}name&min=${data?.min}&max=${data?.max}?packName=${data?.packName}`).then((response) => response.data)\r\n  },\r\n  deletePack(id: string) {\r\n    return instance.delete(`cards/pack/?id=${id}`).then((response) => response.data)\r\n  },\r\n  addPack() {\r\n    return instance.post(`cards/pack/`, {cardsPack:{name: 'New'}}).then((response) => response.data)\r\n  },\r\n  updatePack(id: string) {\r\n    return instance.put(`cards/pack/`, {cardsPack:{ _id: id,name:'NewNameUpdated' } }).then((response) => response.data)\r\n  },\r\n    getSinglecardPack(id: string) {\r\n    return instance.get<SingleCardResponseType>(`cards/card/?&cardsPack_id=${id}`).then((response) => response.data)\r\n  },\r\n}\r\nexport type AddDataType = {\r\n  packName?: string\r\n  min?: string\r\n  max?: string\r\n  sortPacks?: string\r\n  page?: string\r\n  pageCount?: string\r\n}\r\n\r\nexport type CardsResponseType = {\r\n  cardPacks: Array<CardsType>\r\n  cardPacksTotalCount: number\r\n  maxCardsCount: number\r\n  minCardsCount: number\r\n  page: number\r\n  pageCount: number\r\n  token: string\r\n  tokenDeathTime: number\r\n}\r\n\r\nexport type CardsType = {\r\n  cardsCount: number\r\n  created: string\r\n  grade: number\r\n  more_id: string\r\n  name: string\r\n  path: string\r\n  private: boolean\r\n  rating: number\r\n  shots: number\r\n  type: string\r\n  updated: string\r\n  user_id: string\r\n  user_name: string\r\n  __v: number\r\n  _id: string\r\n}\r\nexport type SingleCardResponseType = {\r\n  cards: Array<SingleCardType>\r\n  cardsTotalCount: number\r\n  maxGrade: number\r\n  minGrade: number\r\n  page: number\r\n  pageCount: number\r\n  packUserId: string\r\n}\r\n \r\nexport type SingleCardType = {\r\n  answer: string\r\n  question: string\r\n  cardsPack_id: string\r\n  grade: number\r\n  rating: number\r\n  shots: number\r\n  type: string\r\n  user_id: string\r\n  created: string\r\n  updated: string\r\n  __v: number\r\n  _id: string\r\n}","enum ACTION_TYPES  {\r\n    SET_ACTIVE_PAGE = \"Pagin/SET_ACTIVE_PAGE\",\r\n    SET_PAGINATION = \"Pagin/SET_PAGE_RANGE_DISPLAYED\",\r\n    SET_TOTAL_ITEMS = \"Pagin/SET_TOTAL_ITEMS\"\r\n}\r\n\r\ntype initialStateType = {\r\n    pageRangeDisplayed: number,\r\n    activePage: number,\r\n    itemsCountPerPage: number,\r\n    totalItemsCount: number,\r\n}\r\n\r\nconst initialState = {\r\n    // Это цифры самой компоненты, сколько показывать (от 1 до 5 или от 1 до 10), по дефолту 10\r\n    pageRangeDisplayed: 10,\r\n\r\n    // Активная страница\r\n    activePage: 1,\r\n\r\n    //Это пагинация, какими порциями показывать карты, дефолт 10\r\n    itemsCountPerPage: 5,\r\n\r\n    //Сколько всего прийдет карт - сюда надо сетать из get запроса, AC и логику написал, пока хардкод 5000\r\n    totalItemsCount: 0,\r\n}\r\n\r\ntype SetActivePageActionType = {\r\n    type: ACTION_TYPES.SET_ACTIVE_PAGE,\r\n    pageNumber: number\r\n}\r\n\r\ntype SetPaginationActionType = {\r\n    type: ACTION_TYPES.SET_PAGINATION,\r\n    itemsCountPerPage: number,\r\n}\r\n\r\nexport type SetTotalItemsActionType = {\r\n    type: ACTION_TYPES.SET_TOTAL_ITEMS,\r\n    totalItems: number,\r\n}\r\n\r\ntype AllActionTypes = SetActivePageActionType | SetPaginationActionType | SetTotalItemsActionType\r\n\r\nexport const paginationReducer = (state: initialStateType = initialState, action: AllActionTypes): initialStateType  => {\r\n    switch (action.type) {\r\n        case ACTION_TYPES.SET_ACTIVE_PAGE:\r\n            return {...state, activePage: action.pageNumber}\r\n        case ACTION_TYPES.SET_PAGINATION:\r\n            return {...state, itemsCountPerPage: action.itemsCountPerPage}\r\n        case ACTION_TYPES.SET_TOTAL_ITEMS:\r\n            return {...state, totalItemsCount: action.totalItems}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setActivePageAC = (pageNumber: number): SetActivePageActionType => {\r\n    return {\r\n        type: ACTION_TYPES.SET_ACTIVE_PAGE,\r\n        pageNumber,\r\n    }\r\n}\r\n\r\nexport const setPaginationAC = (itemsCountPerPage: number): SetPaginationActionType => {\r\n    return {\r\n        type: ACTION_TYPES.SET_PAGINATION,\r\n        itemsCountPerPage,\r\n    }\r\n}\r\n\r\nexport const setTotalItemsAC = (totalItems: number = 5): SetTotalItemsActionType => {\r\n    return {\r\n        type: ACTION_TYPES.SET_TOTAL_ITEMS,\r\n        totalItems,\r\n    }\r\n}\r\n\r\n\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from \"react\";\r\nimport s from \"./SuperInputText.module.css\";\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\ntype InputPropsType = DefaultInputPropsType & {\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n    touched?: boolean\r\n};\r\n\r\nconst Input: React.FC<InputPropsType> = (\r\n    {\r\n        type,\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName,\r\n        touched,\r\n        ...restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange(e); \r\n        onChangeText && onChangeText(e.currentTarget.value);\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n        e.key === \"Enter\"\r\n        && onEnter && onEnter(); \r\n    }\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : \"\"}`;\r\n    const finalInputClassName = error && touched ? s.errorInput : '' \r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type={type}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={`${s.superInput} ${finalInputClassName}`}\r\n                {...restProps} \r\n            />\r\n            {error && touched && <span className={finalSpanClassName}>{error}</span>}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Input;\r\n","import React from 'react';\r\n\r\nimport './spinner.css';\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <div className=\"lds-css\">\r\n            <div className=\"lds-double-ring\">\r\n                <div></div>\r\n                <div></div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Preloader;","import React from 'react'\r\nimport classes from './message.module.scss'\r\n\r\nconst Message: React.FC<{ message: string; type?: string }> = ({\r\n  message,\r\n  type,\r\n}) => {\r\n  const cls = [classes.Message];\r\n  type && cls.push(classes[type]);\r\n  return <div className={cls.join(\" \")}>{message}</div>;\r\n};\r\nexport default Message","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\r\nimport classes from \"./SuperButton.module.css\";\r\nimport s from \"./SuperButton.module.css\";\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    color?: string\r\n    type?: string\r\n    onClick?:  ()=>void\r\n}\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = ({ color, className, type, onClick,  ...restProps }) => {\r\n\r\n    const cls = [\r\n        classes.Btn\r\n    ]\r\n    color && cls.push(classes[color])\r\n\r\n    return (\r\n        <button\r\n            onClick = {onClick}\r\n            className={cls.join(' ')}\r\n            {...restProps} \r\n        /> \r\n    );\r\n}\r\n\r\nexport default SuperButton;\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from \"react\";\nimport s from \"./SuperCheckbox.module.css\";\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\n  onChangeChecked?: (checked: boolean) => void;\n  spanClassName?: string;\n};\n\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeChecked,\n        className, spanClassName,\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        if (onChangeChecked) {\n          onChangeChecked(e.currentTarget.checked);\n        }\n        // сделайте так чтоб работал onChange и onChangeChecked\n    }\n\n    const finalInputClassName = `${s.checkbox} ${className ? className : \"\"}`;\n\n    return (\n      \n        <label className={s.label}>\n          <input\n            type={\"checkbox\"}\n            onChange={onChangeCallback}\n            className={finalInputClassName}\n            {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\n          />\n          {children && <span className={s.spanClassName}>{children}</span>}\n        </label>\n      // благодаря label нажатие на спан передастся в инпут\n    );\n}\n\nexport default SuperCheckbox;\n","import React from \"react\";\r\nimport classes from \"./login.module.scss\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { useFormik } from \"formik\";\r\nimport { setUserDateTC } from \"../../redux/reducers/profile\";\r\nimport { RootStateType } from \"../../redux/store\";\r\nimport { Redirect, useHistory } from \"react-router-dom\";\r\nimport Input from \"../testComponents/c1-SuperInputText/SuperInputText\";\r\nimport Preloader from \"../preloader/spinner\";\r\nimport Message from \"../message/message\";\r\nimport SuperButton from \"../testComponents/c2-SuperButton/SuperButton\";\r\nimport SuperCheckbox from \"../testComponents/c3-SuperCheckbox/SuperCheckbox\";\r\n\r\ntype FormikErrorsType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nconst Login = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    //here get error response from redux\r\n    const errorLogin = useSelector<RootStateType, string>(state => state.profile.error)\r\n    const isLoaded = useSelector<RootStateType, boolean>(state => state.profile.loading)\r\n    const message = useSelector<RootStateType, string>(state => state.profile.user.message)\r\n    const isAuthSuccess = useSelector<RootStateType, boolean>(state => state.profile.isAuthSuccess)\r\n\r\n    const history = useHistory();\r\n\r\n    const redirectToProfile = () => {\r\n        history.push(`/`);\r\n    };\r\n    const redirectToRegistration = () => {\r\n        history.push(`/register`);\r\n    };\r\n\r\n    isAuthSuccess && (() => {\r\n        setTimeout(() => {\r\n            redirectToProfile()\r\n        }, 3000)\r\n    })()\r\n\r\n    let type = ''\r\n    if (message) { type = 'success' }\r\n    if (errorLogin) { type = 'error' }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(setUserDateTC(values));\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorsType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Must be 8 characters or more';\r\n            }\r\n            return errors;\r\n        }\r\n    })\r\n\r\n    // if (isAuthSuccess) {\r\n    //     return <Redirect to=\"/profile\" />\r\n    // }\r\n\r\n    return (\r\n        <div className={classes.Login}>\r\n            <h2>Login</h2>\r\n            <form onSubmit={formik.handleSubmit} className={classes.Loginform}>\r\n                {isLoaded ? (\r\n                    <Preloader />\r\n                ) : (\r\n                        <>\r\n                            <Input\r\n                                type=\"email\"\r\n                                placeholder=\"Email\"\r\n                                error={formik.errors.email}\r\n                                touched={formik.touched.email}\r\n                                {...formik.getFieldProps(\"email\")}\r\n                                onBlur={formik.handleBlur}\r\n                            />\r\n                            <Input\r\n                                type=\"password\"\r\n                                placeholder=\"Password\"\r\n                                error={formik.errors.password}\r\n                                {...formik.getFieldProps(\"password\")}\r\n                                touched={formik.touched.password}\r\n                                onBlur={formik.handleBlur}\r\n                            />\r\n                        </>\r\n                    )}\r\n                <Message message={errorLogin || message} type={type} />\r\n                <div className={classes.BtnWrapper}>\r\n                    <SuperCheckbox\r\n                        type=\"checkbox\"\r\n                        {...formik.getFieldProps(\"rememberMe\")}\r\n                        onBlur={formik.handleBlur}\r\n                    />\r\n                    <span>Remember me</span>\r\n                    <SuperButton\r\n                        type={\"submit\"}\r\n                        onClick={() => formik.handleSubmit()}\r\n                        disabled={isLoaded}\r\n                    >\r\n                        Login\r\n            </SuperButton>\r\n                    <SuperButton onClick={redirectToRegistration} color=\"blue\">\r\n                        Register\r\n            </SuperButton>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\nexport default Login;\r\n","import {ThunkAction} from 'redux-thunk'\r\nimport {RootStateType} from '../store';\r\nimport {API} from \"../../api/api\";\r\n\r\nconst initState = {\r\n    isMessageSend: false as boolean,\r\n    isNewPasswordSet: false as boolean,\r\n    isFetching: false as boolean,\r\n    isError: null as string | null\r\n}\r\n\r\nexport const passwordReducer = (state: PasswordStateType = initState, action: PasswordActionsType): PasswordStateType => {\r\n    switch (action.type) {\r\n        case 'PASSWORD/SET-MESSAGE-SEND':\r\n            return {...state,isMessageSend: action.isMessageSend}\r\n        case 'PASSWORD/SET-NEW-PASSWORD':\r\n            return {...state,isNewPasswordSet: true}\r\n        case 'PASSWORD/SET-IS-FETCHING':\r\n            return {...state,isFetching: action.isFetching}\r\n        case 'PASSWORD/SET-IS-ERROR':\r\n            return {...state,isError: action.isError}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//ActionCreators\r\nexport const setMessageSendAC = (isMessageSend: boolean) =>\r\n    ({type: 'PASSWORD/SET-MESSAGE-SEND', isMessageSend} as const)\r\nconst setNewPasswordAC = () => ({type: 'PASSWORD/SET-NEW-PASSWORD'} as const)\r\nconst setIsFetchingAC = (isFetching: boolean) => ({type: 'PASSWORD/SET-IS-FETCHING', isFetching} as const)\r\nexport const setErrorAC = (isError: string | null) => ({type: 'PASSWORD/SET-IS-ERROR', isError} as const)\r\n\r\n//ThunkCreators\r\nexport const sendMessageToUser = (email: string): ThunkType => async (dispatch) => {\r\n    dispatch(setIsFetchingAC(true))\r\n    try {\r\n        await API.forgotPassword(email)\r\n        dispatch(setMessageSendAC(true))\r\n        dispatch(setErrorAC(null))\r\n    } catch (err) {\r\n        if (err.response.data.error) {\r\n            dispatch(setErrorAC(err.response.data.error))\r\n        } else {\r\n            dispatch(setErrorAC('Some Error occurred. Please try again'))\r\n            console.log('Error:', {...err})\r\n        }\r\n    } finally {\r\n        dispatch(setIsFetchingAC(false))\r\n    }\r\n}\r\n\r\nexport const setNewPassword = (password: string, token: string): ThunkType => async (dispatch) => {\r\n    dispatch(setIsFetchingAC(true))\r\n    try {\r\n        await API.setNewPassword(password, token)\r\n        dispatch(setNewPasswordAC())\r\n        dispatch(setErrorAC(null))\r\n    } catch (err) {\r\n        if (err.response.data.error) {\r\n            dispatch(setErrorAC(err.response.data.error))\r\n        } else {\r\n            dispatch(setErrorAC('Some Error occurred. Please try again'))\r\n            console.log('Error:', {...err})\r\n        }\r\n    } finally {\r\n        dispatch(setIsFetchingAC(false))\r\n    }\r\n}\r\n\r\n//Types\r\ntype PasswordStateType = typeof initState\r\ntype PasswordActionsType =\r\n    ReturnType<typeof setMessageSendAC> |\r\n    ReturnType<typeof setNewPasswordAC> |\r\n    ReturnType<typeof setIsFetchingAC> |\r\n    ReturnType<typeof setErrorAC>\r\ntype ThunkType = ThunkAction<void, RootStateType, unknown, PasswordActionsType>\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport classes from './newPass.module.scss';\r\nimport {useFormik} from 'formik';\r\nimport {Redirect, useParams} from 'react-router-dom';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {setNewPassword} from '../../redux/reducers/password';\r\nimport {RootStateType} from '../../redux/store';\r\nimport Preloader from '../preloader/spinner';\r\nimport SuperInputText from '../testComponents/c1-SuperInputText/SuperInputText';\r\nimport SuperButton from '../testComponents/c2-SuperButton/SuperButton';\r\n\r\nconst NewPass: React.FC = () => {\r\n    const dispatch = useDispatch()\r\n    const isFetching = useSelector<RootStateType, boolean>(state => state.password.isFetching)\r\n    const isError = useSelector<RootStateType, string | null>(state => state.password.isError)\r\n    const isNewPasswordSet = useSelector<RootStateType, boolean>(state => state.password.isNewPasswordSet)\r\n    const {token} = useParams<ParamTypes>()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            password: '',\r\n        },\r\n        validate: (values: FormikErrorType) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Must be 8 characters or more';\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(setNewPassword(values.password, token))\r\n        },\r\n    });\r\n\r\n    // if success password changed\r\n    if (isNewPasswordSet) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n    //Preloader\r\n    if (isFetching) {\r\n        return <div className={classes.NewPass}><Preloader/></div>\r\n    }\r\n    return <div className={classes.NewPass}>\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <div>\r\n                <SuperInputText\r\n                    id=\"password\"\r\n                    type=\"password\"\r\n                    placeholder={'New Password'}\r\n                    {...formik.getFieldProps('password')}\r\n                />\r\n            </div>\r\n            {formik.touched.password && formik.errors.password ? (\r\n                <div style={{color: 'red'}}>{formik.errors.password}</div>\r\n            ) : null}\r\n            <SuperButton type=\"submit\" color='blue'>Set New Password</SuperButton>\r\n            {isError ? <div style={{color: 'red'}}>{isError}</div> : <></>}\r\n        </form>\r\n    </div>;\r\n};\r\nexport default NewPass;\r\n\r\n//Types\r\ntype FormikErrorType = {\r\n    password?: string\r\n}\r\ntype ParamTypes = {\r\n    token: string\r\n}\r\n","import React, {useEffect, useState} from 'react'\r\nimport classes from './passRecover.module.scss'\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {sendMessageToUser, setErrorAC, setMessageSendAC} from '../../redux/reducers/password';\r\nimport {RootStateType} from '../../redux/store';\r\nimport Preloader from '../preloader/spinner';\r\nimport SuperInputText from '../testComponents/c1-SuperInputText/SuperInputText';\r\nimport SuperButton from '../testComponents/c2-SuperButton/SuperButton';\r\n\r\nconst PassRecover: React.FC = React.memo(() => {\r\n    const dispatch = useDispatch();\r\n    const isMessageSend = useSelector<RootStateType, boolean>(state => state.password.isMessageSend)\r\n    const isError = useSelector<RootStateType, string | null>(state => state.password.isError)\r\n    const isFetching = useSelector<RootStateType, boolean>(state => state.password.isFetching)\r\n    const [timeForNextTry, setTimeForNextTry] = useState<number>(60)\r\n\r\n    //for timer after send message, for try again\r\n    useEffect(() => {\r\n        if (isMessageSend) {\r\n            const id = setTimeout(() => {\r\n                setTimeForNextTry(timeForNextTry - 1)\r\n            }, 1000)\r\n            if (timeForNextTry === 0) {\r\n                setTimeForNextTry(60)\r\n                clearTimeout(id)\r\n                dispatch(setMessageSendAC(false))\r\n            }\r\n            return () => {\r\n                clearTimeout(id)\r\n            }\r\n        } else {\r\n            return\r\n        }\r\n    }, [timeForNextTry, isMessageSend, dispatch, isFetching])\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n        },\r\n        validate: (values: FormikErrorType) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(sendMessageToUser(values.email))\r\n        },\r\n    });\r\n\r\n    //cancel error, if server send good request after bad\r\n    const cancelError = () => {\r\n        if (isError) {\r\n            dispatch(setErrorAC(null))\r\n        }\r\n    }\r\n    //preloader\r\n    if (isFetching) {\r\n        return <div className={classes.PassRecover}><Preloader/></div>\r\n    }\r\n    //next try send message\r\n    if (isMessageSend) {\r\n        return (\r\n            <div className={classes.PassRecover}>\r\n                <span>Email sent, check your email </span>\r\n                <br/>\r\n                <span>You can try again after: {timeForNextTry}</span>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className={classes.PassRecover}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                RECOVER\r\n                <div>\r\n                    <SuperInputText\r\n                        id=\"email\"\r\n                        type=\"email\"\r\n                        placeholder={'Email'}\r\n                        onFocus={cancelError}\r\n                        {...formik.getFieldProps('email')}\r\n                    />\r\n                </div>\r\n                {formik.touched.email && formik.errors.email ? (\r\n                    <div style={{color: 'red'}}>{formik.errors.email}</div>\r\n                ) : null}\r\n                <SuperButton type=\"submit\">Send Email</SuperButton>\r\n                {isError ? <div style={{color: 'red'}}>{isError}</div> : <></>}\r\n            </form>\r\n        </div>\r\n    )\r\n})\r\nexport default PassRecover\r\n\r\n//Types\r\ntype FormikErrorType = {\r\n    email?: string\r\n}","import React, { useEffect } from \"react\";\r\nimport classes from \"./profile.module.scss\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../redux/store\";\r\nimport {deleteUserTC, isUserAuth, User} from \"../../redux/reducers/profile\";\r\nimport SuperButton from \"../testComponents/c2-SuperButton/SuperButton\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Preloader from \"../preloader/spinner\";\r\n\r\nconst Profile = () => {\r\n\r\nlet isLoaded = useSelector<RootStateType, boolean>((state)=>state.profile.loading)\r\nconst dispatch = useDispatch()\r\n  const history = useHistory()\r\n  const isAuthorised = useSelector<RootStateType, boolean>((state)=>state.profile.isAuthSuccess)\r\n  \r\n  useEffect(() => {\r\n    dispatch(isUserAuth());\r\n    !isAuthorised && history.push(\"/login\");\r\n  },[])\r\n  const logoutHandler = () => {\r\n    dispatch(deleteUserTC());\r\n    history.push('/login')\r\n  }\r\n  const user = useSelector<RootStateType, User>(state => state.profile.user)\r\n\r\n  return <div className={classes.Profile}>\r\n    {isLoaded ? <Preloader /> : Object.values(user).map(e => <div>{e}</div>)}\r\n    <SuperButton onClick={logoutHandler}>Logout</SuperButton>\r\n  </div>;\r\n};\r\nexport default Profile;\r\n","export const CHANGE = 'CHANGE'\r\nexport const REGISTER_NEW_USER = 'REGISTER_NEW_USER'\r\nexport const GET_REGISTRATION_ERROR = 'GET_REGISTRATION_ERROR'\r\nexport const SET_REG_LOADING = 'SET_REG_LOADING'","import { RootStateType } from './../store';\r\nimport { API, userRegType } from \"../../api/api\"\r\nimport { GET_REGISTRATION_ERROR, REGISTER_NEW_USER, SET_REG_LOADING } from \"../types\"\r\nimport { Dispatch } from \"redux\"\r\nexport type RegisterType = ReturnType<typeof onRegister> | ReturnType<typeof onError> | ReturnType<typeof onRegLoading>\r\n\r\nexport const onRegister = (user: string) => {\r\n  return {\r\n    type: REGISTER_NEW_USER,\r\n    user\r\n  }as const \r\n}\r\nexport const onError = (error: string) => {\r\n  return {\r\n    type: GET_REGISTRATION_ERROR,\r\n    error\r\n  }as const \r\n}\r\n\r\nexport const onRegLoading = () => {\r\n  return{type:SET_REG_LOADING} as const\r\n}\r\n\r\nexport const makeRegistration = (data: userRegType) => async (dispatch: Dispatch, getState: RootStateType) => {\r\n  try {\r\n    dispatch(onRegLoading())\r\n    const user = await API.register(data)\r\n\r\n    dispatch(onRegister(`${user.addedUser.name} successfully registered`))\r\n  }\r\n  catch(e) {\r\n    const errors = { ...e }\r\n    let errorMsg = errors.response.data.error\r\n    dispatch(onError(errorMsg))\r\n  }\r\n}","import { useFormik } from \"formik\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {userRegType} from \"../../api/api\";\r\nimport { makeRegistration, onError } from \"../../redux/actions/register\";\r\nimport { RegisterStateType } from \"../../redux/reducers/register\";\r\nimport { RootStateType } from \"../../redux/store\";\r\nimport Message from \"../message/message\";\r\nimport Preloader from \"../preloader/spinner\";\r\nimport Input from \"../testComponents/c1-SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../testComponents/c2-SuperButton/SuperButton\";\r\nimport classes from \"./register.module.scss\";\r\n\r\ntype FormikErrorType = {\r\n   email?: string\r\n   password?: string\r\n}\r\n\r\n\r\nconst Register = () => {\r\n  const history = useHistory()\r\n  const dispatch = useDispatch()\r\n  const registerStatuses = useSelector<RootStateType, RegisterStateType>((state) => state.register);\r\n  let type = ''\r\n  if(registerStatuses.user){type = 'success'}\r\n  if (registerStatuses.error) { type = 'error' }\r\n  \r\n  const  redirectToLogin = () => {\r\n    history.push(`/login`);\r\n  };\r\n  \r\n  registerStatuses.user && (()=> {\r\n    setTimeout(() => {\r\n      redirectToLogin()\r\n    }, 3000)\r\n  })()\r\n\r\n  const onFocus = ()=>{\r\n    dispatch(onError(''))\r\n  }\r\n  \r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: \"\",\r\n      password: \"\",\r\n    },\r\n    onSubmit: (values) => {\r\n      dispatch(makeRegistration(values));\r\n      formik.resetForm();\r\n    },\r\n\r\n    validate: (values: userRegType) => {\r\n      const errors: FormikErrorType = {};\r\n      if (!values.email) {\r\n        errors.email = \"Email required\";\r\n      } else if (\r\n        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\r\n      ) {\r\n        errors.email = \"Invalid email address\";\r\n      }\r\n      if (!values.password) {\r\n        errors.email = \"Password required\";\r\n      } else if (values.password.length < 8) {\r\n        errors.password = \"Password must be at least 8 characters\";\r\n      }\r\n      return errors;\r\n    },\r\n  });\r\n\r\n  return (\r\n    <div className={classes.Register}>\r\n      <h2>Register</h2>\r\n\r\n      <form className={classes.registerForm}>\r\n        {registerStatuses.loading ? (\r\n          <Preloader />\r\n        ) : (\r\n          <>\r\n            <Input\r\n              type=\"email\"\r\n              error={formik.errors.email}\r\n              touched={formik.touched.email}\r\n              {...formik.getFieldProps(\"email\")}\r\n              onBlur={formik.handleBlur}\r\n              onFocus={onFocus}\r\n            />\r\n            <Input\r\n              type=\"password\"\r\n              error={formik.errors.password}\r\n              {...formik.getFieldProps(\"password\")}\r\n              touched={formik.touched.password}\r\n              onBlur={formik.handleBlur}\r\n              onFocus={onFocus}\r\n            />\r\n          </>\r\n        )}\r\n        <Message\r\n          message={registerStatuses.error || registerStatuses.user}\r\n          type={type}\r\n        />\r\n        <div className={classes.Btns}>\r\n          <SuperButton\r\n            type={\"submit\"}\r\n            onClick={() => formik.handleSubmit()}\r\n            disabled={registerStatuses.loading}\r\n          >\r\n            Register\r\n          </SuperButton>\r\n          <SuperButton onClick={redirectToLogin} color=\"blue\">\r\n            Login\r\n          </SuperButton>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nexport default Register;\r\n\r\n","import React from 'react'\r\nimport classes from './error.module.scss'\r\n\r\n\r\nconst Error = () => {\r\n  return (\r\n    <div className={classes.Error}>\r\n      Error 404\r\n    </div>\r\n  )\r\n}\r\nexport default Error","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport classes from './nav.module.scss'\r\n\r\nconst Nav = () => {\r\n  const routeList = [\r\n    { to: \"/\", name: \"profile\" },\r\n    { to: \"/register\", name: \"register\" },\r\n    { to: \"/login\", name: \"login\" },\r\n    { to: \"/passRecover\", name: \"recover password\" },\r\n    { to: \"/packs\", name: \"packs\" },\r\n    { to: \"/cards\", name: \"cards\" },\r\n  ].map(({ to, name }) => {\r\n    return (\r\n      <li key={name}>\r\n        <NavLink to={to} className={classes.RouteLink}>\r\n          {name}\r\n        </NavLink>\r\n      </li>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <ul className = {classes.Nav}>\r\n      {routeList}\r\n    </ul>\r\n  )\r\n}\r\nexport default Nav","enum ACTION_TYPES {\r\n    SET_SEARCH_VALUE = 'SET_SEARCH_VALUE'\r\n}\r\n\r\ntype SetSearchValueActionType = {\r\n    type: ACTION_TYPES.SET_SEARCH_VALUE,\r\n    searchValue: string\r\n}\r\n\r\ntype AllActionTypes = SetSearchValueActionType\r\n\r\ntype InitialStateType = {\r\n    searchValue: string\r\n}\r\n\r\nconst initialState = {\r\n    searchValue: '',\r\n}\r\n\r\nexport const findReducer = (state: InitialStateType = initialState, action: AllActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case ACTION_TYPES.SET_SEARCH_VALUE:\r\n            return {...state, searchValue: action.searchValue}\r\n    }\r\n    return state\r\n}\r\n\r\nexport const setSearchValueAC = (searchValue: string): SetSearchValueActionType => {\r\n    return {\r\n        type: ACTION_TYPES.SET_SEARCH_VALUE,\r\n        searchValue,\r\n    }\r\n}","import { Dispatch } from \"redux\";\r\nimport { ThunkDispatch } from \"redux-thunk\";\r\nimport { AddDataType, API, CardsType } from \"../../api/api\";\r\nimport { RootStateType } from \"../store\";\r\nimport { setTotalItemsAC } from \"./pagination\";\r\n\r\ntype InitCardsType = typeof initState\r\nconst initState = {\r\n  cards: [] as Array<CardsType>,\r\n  loading: false,\r\n  error: '',\r\n  min: 1,\r\n  max: 10\r\n}\r\n\r\nexport type CardsActionType = ReturnType<typeof setLoading>\r\n  | ReturnType<typeof setError>\r\n  | ReturnType<typeof setCards>\r\n  | ReturnType<typeof setTotalItemsAC>\r\n  | ReturnType<typeof setMinMax>\r\n  | ReturnType<typeof deleteCardPack>\r\n  | ReturnType<typeof addCardPack>\r\n  | ReturnType<typeof updateCardPack>\r\n\r\nexport const setLoading = (loading:boolean) => {\r\n  return{type: 'SET_LOADING', loading}as const\r\n}\r\nexport const setError = (error: string) => {\r\n  return{type: 'SET_ERROR', error}as const\r\n}\r\n\r\nexport const setCards = (cards: Array<CardsType>) => {\r\n  return{type: 'SET_CARDS', cards}as const\r\n}\r\nexport const setMinMax = (min: number, max: number) => {\r\n  return{type: 'SET_MIN_MAX', min, max}as const\r\n}\r\nexport const deleteCardPack = (id:string) => {\r\n  return{type: 'DELETE_PACK', id }as const\r\n}\r\nexport const addCardPack = (pack:CardsType) => {\r\n  return{type: 'ADD_PACK', pack}as const\r\n}\r\nexport const updateCardPack = (pack:CardsType) => {\r\n  return{type: 'UPDATE_PACK', pack}as const\r\n}\r\nexport const cardsReducer = (state: InitCardsType = initState, action: CardsActionType): InitCardsType => {\r\n\r\n  switch (action.type) {\r\n    case 'SET_LOADING':\r\n      return { ...state, loading: action.loading }\r\n    case 'SET_ERROR':\r\n      return { ...state, error: action.error, loading: false }\r\n    case 'SET_CARDS':\r\n      return { ...state, cards: action.cards, error: '' }\r\n    case 'SET_MIN_MAX':\r\n      return { ...state, min: action.min, max: action.max }\r\n    case 'DELETE_PACK':\r\n      return { ...state, }\r\n      case 'ADD_PACK':\r\n      return{...state, cards:[...state.cards, action.pack]}\r\n    default: return state\r\n  }\r\n}\r\n\r\nexport const getAllCards = (data?: AddDataType) => (dispatch: Dispatch) => {\r\n  \r\n dispatch(setLoading(true))\r\n  API.getCards(data)\r\n    .then((res) => {\r\n      dispatch(setCards(res.cardPacks))\r\n      dispatch(setTotalItemsAC(+res.cardPacksTotalCount))\r\n      dispatch(setMinMax(+res.minCardsCount, +res.maxCardsCount))\r\n      dispatch(setLoading(false))\r\n    })\r\n    .catch((e) => {\r\n    dispatch(setError(e.response.data.error));\r\n    \r\n  })\r\n}\r\nexport const deleteCards = (id: string) => (dispatch: ThunkDispatch<RootStateType, any,CardsActionType>) => { \r\n   dispatch(setLoading(true))\r\n  API.deletePack(id)\r\n    .then((res) => {\r\n      dispatch(getAllCards());\r\n      dispatch(setLoading(false))\r\n    })\r\n    .catch((e) => {\r\n    dispatch(setError(e.response.data.error));\r\n    \r\n  })\r\n}\r\nexport const addCards = () => (dispatch: ThunkDispatch<RootStateType, any,CardsActionType>) => { \r\n   dispatch(setLoading(true))\r\n  API.addPack()\r\n    .then((res) => {\r\n      dispatch(getAllCards());\r\n      dispatch(setLoading(false))\r\n    })\r\n    .catch((e) => {\r\n    dispatch(setError(e.response.data.error));\r\n    \r\n  })\r\n}\r\nexport const updateCards = (id: string) => (dispatch: ThunkDispatch<RootStateType, any, CardsActionType>) => { \r\n   dispatch(setLoading(true))\r\n  API.updatePack(id)\r\n    .then((res) => {\r\n      dispatch(getAllCards());\r\n      dispatch(setLoading(false))\r\n    })\r\n    .catch((e) => {\r\n    dispatch(setError(e.response.data.error));\r\n    \r\n  })\r\n}","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport Pagination from \"react-js-pagination\";\r\nimport styles from \"./pagination.module.scss\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../redux/store\";\r\nimport {setActivePageAC, setPaginationAC} from \"../../redux/reducers/pagination\";\r\nimport { getAllCards } from \"../../redux/reducers/cards\";\r\n\r\nexport const Pagin = () => {\r\n\r\n    const activePage = useSelector<RootStateType, number>(state => state.pagination.activePage);\r\n    const pageRangeDisplayed = useSelector<RootStateType, number>(state => state.pagination.pageRangeDisplayed);\r\n    const itemsCountPerPage = useSelector<RootStateType, number>(state => state.pagination.itemsCountPerPage);\r\n    const totalItemsCount = useSelector<RootStateType, number>(state => state.pagination.totalItemsCount);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [isChanged, setIsChanged] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (isChanged) {\r\n            dispatch(\r\n              getAllCards({\r\n                page: activePage.toString(),\r\n                pageCount: itemsCountPerPage.toString(),\r\n              })\r\n            );\r\n            setIsChanged(false);  \r\n        }\r\n    }, [isChanged, setIsChanged])\r\n\r\n    const handlePageChange = (pageNumber: number) => {\r\n       dispatch(setActivePageAC(pageNumber))\r\n        setIsChanged(true)\r\n    }\r\n\r\n    const changedPagination = (e: ChangeEvent<HTMLSelectElement>) => {\r\n        const itemsCount = +e.currentTarget.value;\r\n        dispatch(setPaginationAC(itemsCount))\r\n        setIsChanged(true);\r\n    }\r\n\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <div className={styles.bar}>\r\n          <Pagination\r\n            activePage={activePage}\r\n            itemsCountPerPage={itemsCountPerPage}\r\n            totalItemsCount={totalItemsCount}\r\n            pageRangeDisplayed={pageRangeDisplayed}\r\n            onChange={handlePageChange}\r\n            itemClass = {styles.item}\r\n          />\r\n        </div>\r\n        <div className={styles.pagePortion}>\r\n          Pagination\r\n          <select value={itemsCountPerPage} onChange={changedPagination}>\r\n            <option value=\"5\">5</option>\r\n            <option value=\"10\">10</option>\r\n            <option value=\"15\">15</option>\r\n            <option value=\"50\">50</option>\r\n          </select>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n\r\n\r\n}","import React, {ChangeEvent, KeyboardEvent, useEffect, useState} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setSearchValueAC} from \"../../redux/reducers/find\";\r\nimport {Button, TextField} from \"@material-ui/core\";\r\nimport styles from \"./Find.module.css\"\r\nimport { getAllCards } from \"../../redux/reducers/cards\";\r\n\r\nexport const Find = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [isChange, setIsChange] = useState(false);\r\n    const [error, setError] = useState<string | null>('');\r\n\r\n    const [searchValue, setSearchValue] = useState('')\r\n\r\n    useEffect(() => {\r\n        if (isChange) {\r\n        dispatch(getAllCards({packName: searchValue}));\r\n            setIsChange(false);\r\n        }\r\n    }, [isChange, setIsChange])\r\n\r\n    const onChangesValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const inputValue = e.currentTarget.value;\r\n        setSearchValue(inputValue);\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.key === \"Enter\") {\r\n            appendValue();\r\n        }\r\n    }\r\n\r\n    const appendValue = () => {\r\n        if (searchValue.trim() !== '') {\r\n            dispatch(setSearchValueAC(searchValue))\r\n            setSearchValue(\"\");\r\n            setIsChange(true);\r\n        } else {\r\n            setError(\"Search value is required\")\r\n        }\r\n    }\r\n\r\n    return <React.Fragment>\r\n        <div className={styles.searchField}>\r\n            <TextField\r\n                error={!!error}\r\n                helperText={error}\r\n                label=\"Search\"\r\n                onKeyPress={onKeyPressHandler}\r\n                autoFocus\r\n                onChange={onChangesValue}\r\n                value={searchValue}\r\n            />\r\n            <Button\r\n                onClick={appendValue}\r\n                variant=\"contained\">\r\n                Search\r\n            </Button>\r\n        </div>\r\n\r\n\r\n    </React.Fragment>\r\n}","import { Button, Grid, Paper, Slider, Switch, Table, TableBody, TableCell, TableHead, TableRow, Typography, withStyles } from '@material-ui/core'\r\nimport React, { ChangeEvent, useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { CardsType } from '../../api/api'\r\nimport { addCards, deleteCards, getAllCards, updateCards } from '../../redux/reducers/cards'\r\nimport { RootStateType } from '../../redux/store'\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport Preloader from '../preloader/spinner'\r\nimport classes from './packs.module.scss'\r\nimport { useHistory} from 'react-router-dom'\r\nimport { Pagin } from '../pagination/Pagin'\r\nimport Icon from '@material-ui/core/Icon'\r\nimport { Find } from '../find/Find'\r\n\r\nconst Packs = () => {\r\n\r\n  const CustomTableCell = withStyles((theme) => ({\r\n    head: {\r\n      backgroundColor: theme.palette.common.black,\r\n      color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n      fontSize: 14,\r\n      background: \"rgba(191, 191, 191, .7)\",\r\n    },\r\n  }))(TableCell);\r\n  const CustomSwitch = withStyles((theme) => ({\r\n    root: {\r\n      transform: 'rotate(90deg)',\r\n      background: 'grey',\r\n      borderRadius: '40%'\r\n    },\r\n\r\n  }))(Switch);\r\n\r\n  const styles = (theme: { spacing: { unit: number }; palette: { background: { default: any } } }) => ({\r\n    rightIcon: {\r\n      marginLeft: theme.spacing.unit,\r\n    },\r\n  });\r\n\r\n  const isLoading = useSelector<RootStateType, boolean>((state) => state.cards.loading)\r\n  const cards = useSelector<RootStateType, Array<CardsType>>((state) => state.cards.cards)\r\n  const min = useSelector<RootStateType, number>((state) => state.cards.min)\r\n  const max = useSelector<RootStateType, number>((state) => state.cards.max);\r\n  const isAuthorised = useSelector<RootStateType, boolean>((state) => state.profile.isAuthSuccess)\r\n  const myId= useSelector<RootStateType, string>((state) => state.profile.user._id)\r\n  const itemsCountPerPage = useSelector<RootStateType, number>(state => state.pagination.itemsCountPerPage);\r\n\r\n  const history = useHistory();\r\n\r\n  \r\n  const [sort, setSort] = useState<boolean>(false)\r\n  const [values, setValues] = useState<Array<number>>([min, max])\r\n\r\n  \r\n  const dispatch = useDispatch()\r\n  useEffect(() => {\r\n    !isAuthorised && history.push(\"/login\");\r\n    dispatch(getAllCards({ pageCount: itemsCountPerPage.toString() }));\r\n  }, [])\r\n\r\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setSort(e.currentTarget.checked)\r\n    let res = sort === true ? '0' : '1'\r\n    dispatch(getAllCards({ sortPacks: res }));\r\n  };\r\n  const onSliderChange = (e: ChangeEvent<{}>, newValue: number | number[]) => {\r\n    setValues(newValue as number[])\r\n  };\r\n  const onCountSort = () => {\r\n\r\n    dispatch(getAllCards({min: values[0].toString(), max: values[1].toString() }));\r\n  }\r\n  const deleteHandler = (id: string) => {\r\n    dispatch(deleteCards(id));\r\n  }\r\n  const onPackAdd = () => {\r\n    dispatch(addCards());\r\n    \r\n  }\r\n  const onUpdated = (id:string) => {\r\n    dispatch(updateCards(id));\r\n  }\r\n  const onCardsGet = (id: string) => {\r\n    history.push(`/cards/:${id}`)\r\n  }\r\n  const rows = cards.map((el) => {\r\n    return (\r\n      <TableRow key={el._id}>\r\n        <CustomTableCell component=\"th\" scope=\"row\">\r\n          {el.name}\r\n        </CustomTableCell>\r\n        <CustomTableCell align=\"right\">{el.cardsCount}</CustomTableCell>\r\n        <CustomTableCell align=\"right\">{el.user_id}</CustomTableCell>\r\n        <CustomTableCell align=\"right\">{el.path}</CustomTableCell>\r\n        <CustomTableCell align=\"right\">\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            className={classes.button}\r\n            disabled={myId !== el.user_id}\r\n            onClick={() => deleteHandler(el._id)}\r\n          >\r\n            Delete\r\n            <DeleteIcon className={classes.rightIcon} />\r\n          </Button>\r\n        </CustomTableCell>\r\n        <CustomTableCell align=\"right\">\r\n          <Button\r\n            disabled={myId !== el.user_id}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.button}\r\n            onClick={()=>onUpdated(el._id)}\r\n          >\r\n            update\r\n          </Button>\r\n        </CustomTableCell>\r\n        <CustomTableCell align=\"right\">\r\n          <Button variant=\"contained\" component=\"span\" onClick={()=>onCardsGet(el._id)}>\r\n            Get Cards\r\n          </Button>\r\n        </CustomTableCell>\r\n      </TableRow>\r\n    );\r\n  })\r\n\r\n  return (\r\n    <div className={classes.Packs}>\r\n      <Typography gutterBottom variant=\"h3\" component=\"h4\">\r\n        Card Packs\r\n      </Typography>\r\n      {isLoading ? (\r\n        <Preloader />\r\n      ) : (\r\n        <>\r\n          <Find />\r\n          <Grid\r\n            container\r\n            xs={6}\r\n            direction=\"row\"\r\n            justify=\"space-between\"\r\n            style={{ width: \"100%\", margin: \"20px\", flexBasis: \"0\" }}\r\n          >\r\n            <Grid item xs={4} style={{ color: \"yellow\" }}>\r\n              put your count range\r\n              <Slider\r\n                color=\"primary\"\r\n                value={values}\r\n                max={max}\r\n                min={min}\r\n                valueLabelDisplay=\"auto\"\r\n                aria-labelledby=\"range-slider\"\r\n                onChange={onSliderChange}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.button}\r\n                onClick={onCountSort}\r\n              >\r\n                <Icon className={classes.rightIcon}>sort</Icon>\r\n                by count\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={2}>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"default\"\r\n                className={classes.button}\r\n                onClick={onPackAdd}\r\n              >\r\n                <Icon className={classes.rightIcon} color=\"primary\">\r\n                  add\r\n                </Icon>\r\n                pack\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Paper className={classes.root}>\r\n            <Table className={classes.table}>\r\n              <TableHead style={{ borderRadius: \"3px\" }}>\r\n                <TableRow>\r\n                  <CustomTableCell>\r\n                    <CustomSwitch checked={sort} onChange={handleChange} /> Name\r\n                  </CustomTableCell>\r\n                  <CustomTableCell align=\"right\">Card Count</CustomTableCell>\r\n                  <CustomTableCell align=\"right\">Updated</CustomTableCell>\r\n                  <CustomTableCell align=\"right\">Url</CustomTableCell>\r\n                  <CustomTableCell align=\"right\">Delete</CustomTableCell>\r\n                  <CustomTableCell align=\"right\">Update</CustomTableCell>\r\n                  <CustomTableCell align=\"right\">Get Cards</CustomTableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>{rows}</TableBody>\r\n            </Table>\r\n          </Paper>\r\n          <Pagin />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\nexport default Packs","\r\nimport { Dispatch } from \"redux\";\r\nimport { API, SingleCardType } from \"../../api/api\";\r\n\r\ntype SingleCardsInitType = typeof initState\r\nconst initState = {\r\n  card: [] as Array<SingleCardType>,\r\n  loading: false,\r\n  error: ''\r\n}\r\n\r\nexport type SingleCardActionType = ReturnType<typeof setSingleCard> | ReturnType<typeof setSingleCardLoading> | ReturnType<typeof setSingleCardError>\r\n\r\nexport const setSingleCard = (card: Array<SingleCardType>) => {\r\n  \r\n  return { type: 'SET_SINGLE_CARD', card } as const\r\n}\r\nexport const setSingleCardLoading = (load: boolean) => {\r\n  return { type: 'SET_SINGLE_LOADING', load } as const\r\n}\r\nexport const setSingleCardError = (error: string) => {\r\n  return { type: 'SET_SINGLE_ERROR', error } as const\r\n}\r\nexport const singleCardReducer = (state: SingleCardsInitType = initState, action: SingleCardActionType): SingleCardsInitType => {\r\n  switch (action.type) {\r\n    case 'SET_SINGLE_CARD':\r\n      return { ...state, card: action.card, error: '' }\r\n    case 'SET_SINGLE_LOADING':\r\n      return { ...state, loading: action.load }\r\n    case 'SET_SINGLE_ERROR':\r\n      return { ...state, loading: false, error: action.error }\r\n    default: return state\r\n  }\r\n}\r\n\r\nexport const getSinglePack = (id: string) => (dispatch: Dispatch) => {\r\n  \r\n   dispatch(setSingleCardLoading(true))\r\n  API.getSinglecardPack(id)\r\n    .then((res) => {\r\n      dispatch(setSingleCard(res.cards))\r\n      // dispatch(setTotalItemsAC(+res.cardPacksTotalCount))\r\n      // dispatch(setMinMax(+res.minCardsCount, +res.maxCardsCount))\r\n        dispatch(setSingleCardLoading(false))\r\n    })\r\n    .catch((e) => {\r\n    dispatch(setSingleCardError(e.response.data.error));\r\n    \r\n  })\r\n}","import { Button, Paper, Table, TableBody, TableCell, TableHead, TableRow, Typography, withStyles } from '@material-ui/core';\r\nimport React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory, useParams} from 'react-router-dom';\r\nimport { SingleCardType } from '../../api/api';\r\nimport { getSinglePack } from '../../redux/reducers/singleCard';\r\nimport { RootStateType } from '../../redux/store';\r\nimport Preloader from '../preloader/spinner';\r\nimport classes from './cards.module.scss'\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\n\r\nconst Cards = () => {\r\n  const { id } = useParams<{ id: string }>();\r\n  const dispatch = useDispatch()\r\n  const cardPack = useSelector<RootStateType, Array<SingleCardType>>((state) => state.singlePack.card)\r\n  const isLoading = useSelector<RootStateType, boolean>((state) => state.singlePack.loading)\r\n  const isAuthorised = useSelector<RootStateType, boolean>((state) => state.profile.isAuthSuccess)\r\n  \r\n  const history = useHistory();\r\n  \r\n  useEffect(() => {\r\n    !isAuthorised && history.push(\"/login\");\r\n  id &&  dispatch(getSinglePack(id.slice(1)));\r\n  }, [])\r\n    const CustomTableCell = withStyles((theme) => ({\r\n      head: {\r\n        backgroundColor: \"green\",\r\n        color: \"black\",\r\n        fontSize: 24,\r\n      },\r\n      body: {\r\n        fontSize: 20,\r\n        background: \"rgba(191, 191, 191, .7)\",\r\n      },\r\n    }))(TableCell);\r\n  \r\n  const rows = cardPack.map((el) => {\r\n    return (\r\n      <TableRow key={el._id}>\r\n        <CustomTableCell component=\"th\" scope=\"row\">\r\n          {el.answer}\r\n        </CustomTableCell>\r\n        <CustomTableCell align=\"right\">{el.question}</CustomTableCell>\r\n        <CustomTableCell align=\"right\">{el.grade}</CustomTableCell>\r\n        <CustomTableCell align=\"right\">{el.rating}</CustomTableCell>\r\n        <CustomTableCell align=\"right\">{el.shots}</CustomTableCell>\r\n        <CustomTableCell align=\"right\">\r\n          <Button\r\n            // disabled={myId !== el.user_id}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            // className={classes.button}\r\n            // onClick={() => onUpdated(el._id)}\r\n          >\r\n            update\r\n          </Button>\r\n        </CustomTableCell>\r\n        <CustomTableCell align=\"right\">\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            // className={classes.button}\r\n            // disabled={myId !== el.user_id}\r\n            // onClick={() => deleteHandler(el._id)}\r\n          >\r\n            Delete\r\n            <DeleteIcon className={classes.rightIcon} />\r\n          </Button>\r\n        </CustomTableCell>\r\n      </TableRow>\r\n    );\r\n  })\r\n  return (\r\n    <div className={classes.Cards}>\r\n      <Typography gutterBottom variant=\"h3\" component=\"h4\">\r\n        Card Packs\r\n      </Typography>\r\n      {isLoading ? (\r\n        <Preloader />\r\n      ) : (\r\n        <>\r\n          <Paper className={classes.root}>\r\n            <Table className={classes.table}>\r\n              <TableHead style={{ borderRadius: \"3px\" }}>\r\n                <TableRow>\r\n                  <CustomTableCell>Answer</CustomTableCell>\r\n                  <CustomTableCell align=\"right\">Question</CustomTableCell>\r\n                  <CustomTableCell align=\"right\">Grade</CustomTableCell>\r\n                  <CustomTableCell align=\"right\">Rating</CustomTableCell>\r\n                  <CustomTableCell align=\"right\">Shoots</CustomTableCell>\r\n                  <CustomTableCell align=\"right\">Update</CustomTableCell>\r\n                  <CustomTableCell align=\"right\">Delete</CustomTableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n                <TableBody>\r\n                  {rows}\r\n              </TableBody>\r\n            </Table>\r\n          </Paper>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\nexport default Cards","import React from 'react';\r\nimport { Redirect, Route, Switch } from 'react-router-dom';\r\n\r\nimport './App.css';\r\nimport Login from './components/login/login';\r\nimport NewPass from './components/newPass/newPass';\r\nimport PassRecover from './components/passRecower/recover';\r\nimport Profile from './components/profile/profile';\r\nimport Register from './components/register/register';\r\nimport Error from './components/error/error'\r\nimport Nav from './components/navigation/nav';\r\nimport Packs from './components/packs/packs';\r\nimport Cards from './components/cards/cards';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Nav />\r\n      <Switch>\r\n        <Route exact path={\"/\"} render={() => <Profile />} />\r\n        <Route exact path={\"/login\"} render={() => <Login />} />\r\n        <Route exact path={\"/register\"} render={() => <Register />} />\r\n        <Route exact path={\"/packs\"} render={() => <Packs />} />\r\n        <Route exact path={\"/cards/:id?/\"} render={() => <Cards />} />\r\n        <Route path={\"/NewPass/:token\"} render={() => <NewPass />} />\r\n        <Route exact path={\"/passRecover\"} render={() => <PassRecover />} />\r\n        <Route path={\"*\"} render={() => <Error />} />\r\n        <Redirect from={\"*\"} to={\"/404\"} />\r\n      </Switch>\r\n        \r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { RegisterType } from \"../actions/register\";\r\nimport { GET_REGISTRATION_ERROR, REGISTER_NEW_USER, SET_REG_LOADING } from \"../types\";\r\n\r\nexport type RegisterStateType = typeof initState;\r\nconst initState = {\r\n  loading: false,\r\n  error: '',\r\n  user: ''\r\n};\r\n\r\nexport const registerReducer = (state: RegisterStateType = initState,action: RegisterType): RegisterStateType => {\r\n  switch (action.type) {\r\n    case REGISTER_NEW_USER: \r\n      return { ...state, loading: false, error: '', user: action.user }\r\n    case GET_REGISTRATION_ERROR:\r\n      return { ...state, loading: false, error: action.error, user: '' }\r\n    case SET_REG_LOADING:\r\n      return{...state, loading:true}\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","\r\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from 'redux-thunk';\r\nimport { profileReducer } from \"./reducers/profile\";\r\nimport { registerReducer } from \"./reducers/register\";\r\nimport {passwordReducer} from './reducers/password';\r\nimport { cardsReducer } from \"./reducers/cards\";\r\nimport { singleCardReducer } from \"./reducers/singleCard\";\r\nimport {paginationReducer} from \"./reducers/pagination\";\r\nimport { findReducer } from \"./reducers/find\";\r\nconst reducers = combineReducers({\r\n  register: registerReducer,\r\n  profile: profileReducer,\r\n  password: passwordReducer,\r\n  cards: cardsReducer,\r\n  pagination: paginationReducer,\r\n  singlePack: singleCardReducer,\r\n  find: findReducer,\r\n});\r\n\r\n\r\ntype rootReducerType = typeof reducers\r\nexport type RootStateType = ReturnType<rootReducerType>\r\nconst store = createStore(reducers, applyMiddleware(thunk))\r\n// @ts-ignore\r\nwindow.store = store;\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = {store}>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Packs\":\"packs_Packs__3Wv2M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Cards\":\"cards_Cards__HJvUU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Login\":\"login_Login__3jIq-\",\"Loginform\":\"login_Loginform__3feNI\",\"BtnWrapper\":\"login_BtnWrapper__3AvOc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"SuperInputText_superInput__19Lxl\",\"errorInput\":\"SuperInputText_errorInput__2GFWv\",\"error\":\"SuperInputText_error__3VApw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__3UPxI\",\"click-wave\":\"SuperCheckbox_click-wave__1JaFw\",\"spanClassName\":\"SuperCheckbox_spanClassName__kUCUS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PassRecover\":\"passRecover_PassRecover__1FtlO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Register\":\"register_Register__83p-8\",\"registerForm\":\"register_registerForm__D6_FP\",\"Btns\":\"register_Btns__2VhGt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bar\":\"pagination_bar__Io-cD\",\"item\":\"pagination_item__2OM3D\",\"pagePortion\":\"pagination_pagePortion__37GcN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Message\":\"message_Message__23eo-\",\"error\":\"message_error__jxt0X\",\"success\":\"message_success__2ShDs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Btn\":\"SuperButton_Btn__3DrOw\",\"blue\":\"SuperButton_blue__1YYR0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NewPass\":\"newPass_NewPass__9f8g0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Nav\":\"nav_Nav__2Uw7N\",\"RouteLink\":\"nav_RouteLink__11f8F\"};"],"sourceRoot":""}